1. The throw keyword
Any object of the THROWABLE class and all its subclasses can be thrown using the throw statement. 
The general form of the statement consists of the throw keyword and an object to be thrown.

we create and throw an object of the RuntimeException class that extends Throwable.

public class Main {
    public static void main(String args[]) {
        RuntimeException exception = new RuntimeException("Something's bad.");
        throw exception;
    }
}

The program stops and prints the error with the message we provided:

    Exception in thread "main" java.lang.RuntimeException: Something's bad.
        at Main.main(Main.java:3)

The common practice is to create and throw an exception in a single line:

    throwing an instance of Throwable
        throw new Throwable("Something's bad.");
    throwing an instance of Exception
        throw new Exception("An exception occurs");
    throwing an instance of NullPointerException
        throw new NullPointerException("The field is null");

    It is only possible to throw an object of the Throwable class or a class that extends Throwable. 
    For example, the line throw new Long(10L); does not compile.

method with throw exception

    public static int divide(int x, int y) throws ArithmeticException {
        if (y == 0) {
            throw new ArithmeticException("Division by zero");
        }
        return x / y;
    }

2. Throwing checked exceptions

    If a method throws a checked exception, the type of exception must be specified in the method declaration after the throws keyword. 
    Otherwise, the code won't compile.

    Ex:
     if (!found) {
        throw new IOException("The file " + path + " is not found");
    }
    If a method throws two or more checked exceptions, they must be separated by a comma (,) in the declaration:

    public static void method() throws ExceptionType1, ExceptionType2, ExceptionType3

3. Throwing unchecked exceptions
    Let's see how unchecked exceptions are thrown in a more real-life example. 
    The Account class contains the method called deposit, that adds the specified amount to the current balance. 
    If the amount is not positive or exceeds the limit, the method throws an IllegalArgumentException.

    Ex: 
        class Account {

        private long balance = 0;
        
        public void deposit(long amount) {
            if (amount <= 0) {
                throw new IllegalArgumentException("Incorrect sum " + amount);
            }
            
            if (amount >= 100_000_000L) {
                throw new IllegalArgumentException("Too large amount");
            }
            
            balance += amount;
        }
        
        public long getBalance() {
            return balance;
        }
    }

4. When to throw exception

    There are different cases where you would want to throw an exception. 
    Imagine a method that parses the input string in the dd-MM-yyyy format to get a month. 
    Here, if the string is invalid, the method throws an InvalidArgumentException. 
    Another example is reading a non-existing file that will lead to a FileNotFoundException.

    After some time of practice, identifying situations where you need an exception will become an easier task for you. 
    It is recommended to throw exceptions that are most relevant (specific) to the problem: it is better to throw an object of InvalidArgumentException than the base Exception class.