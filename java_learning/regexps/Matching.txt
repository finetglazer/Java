1. Simple matching

    In Java, String data type has built-in support for regular expressions. 
    Strings have a special method called matches that takes a regular expression pattern as its argument and checks whether the string matches this pattern. 
    Keep in mind that the method returns true only when the whole string matches the regexp, otherwise, it returns false. 
    The pattern defined by the regex is applied to the text from left to right.

    Ex:
        String aleRegex = "ale"; // the "ale" regex
        "ale".matches(aleRegex);  // true
        "pale".matches(aleRegex); // false, "pale" string has an additional character
        "ALE".matches(aleRegex);  // false, uppercase letters don't match lowercase and vice versa 
        You can see that the string "pale" is not matched by our regex pattern. 
        The reason is that Java regex implementation checks whether the whole string can be fit into the regex pattern, not just some substring. 

2. The dot character and the question mark

    Ex: String learnRegex = "Learn.Regex";

        "Learn Regex".matches(learnRegex); // true
        "Learn.Regex".matches(learnRegex); // true
        "LearnRegex".matches(learnRegex); // false
        "Learn, Regex".matches(learnRegex); // false
        "Learn\nRegex".matches(learnRegex); // false

        String pattern = "behaviou?r";

        "behaviour".matches(pattern); // true
        "behavior".matches(pattern);  // true

        String pattern = "..?";

        "I".matches(pattern);  // true
        "am".matches(pattern); // true
        "".matches(pattern);   // false

3. The tricky escape character
    Right now you're probably wondering what we should do 
    if we want to use the dot . or the ? as a regular punctuation mark and not as a special symbol within the regex pattern?
    ->Well, in this case, we should protect our special symbol by putting the backslash \ before it.
    
    Note: a double backslash \\ in your regex means a single backslash in the matching string.
    
    However, coz in programming the \ used to for string, it still be in string like the matching so u need to protect STRING, 
    u need a additional \ before it. 

    Ex:
        String endRegex = "The End\\.";

        "The End.".matches(endRegex); // true
        "The End?".matches(endRegex); // false

        In the endRegex expression, the first backslash is used to escape the second backslash, 
        which is used to escape the dot "." character. 
        The dot character is a special character in regular expressions that matches any single character, 
        so if you want to match a literal dot character, you need to escape it with a backslash.

        Therefore, the regular expression The End\\. matches the string "The End." 
        because it matches the literal string "The End." with a dot at the end. 
        The first backslash in the regular expression is used to escape the second backslash, 
        which is used to escape the dot character.

        In contrast, the string "The End?" does not match the endRegex regular expression 
        because it does not end with a dot character. 
        The dot character in the regular expression requires that the string ends with a dot, 
        so any string that does not end with a dot will not match the regular expression.

