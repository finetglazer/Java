INTERFACES
An interface is a class-like construct for defining COMMON OPERATIONS for objects

In many ways an interface is similar to an abstract class, but its intent is to specify common 
behavior for objects of related classes or unrelated classes. For example, using appropriate 
interfaces, you can specify that the objects are comparable, edible, and/or cloneable

modifier interface InterfaceName {
 /** Constant declarations */
 /** Abstract method signatures */
}
Here is an example of an interface:
public interface Edible {
 /** Describe how to eat */
 public abstract String howToEat(); 


OVERVIEW EXMAPLE to compare between interface and abstract class:

interface Edible {
    String howToEat();

}

abstract class Animal {
    private double weight;
    
    public double getWeight() {
        return weight;
    }
    
    public abstract String sound();
}

class Chicken extends Animal implements Edible {
    @Override
    public String howToEat() {
        return "keke";
    }

    @Override
    public String sound() {
        return "huhu";
    }

main {
 Animal chicken = new Chicken();
 sout(chicken.sound());

  }
}

-> huhu
