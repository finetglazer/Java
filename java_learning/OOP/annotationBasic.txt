An annotation is a special Java instrument that provides information about a program. 
Its main goal is to make programmers' lives easier. 
To give them a more formal definition, annotations are a form of metadata, which means they are not part of the program itself.

You can mark classes, methods, fields, variables, and other parts of a program with annotations. 
When you do it, annotations provide information for the compiler, for some development tools, or for frameworks and libraries at runtime.

1. Annotation, where are you?

All annotations start with the @ symbol followed by the annotation name, and they are usually marked with a color different from the code.

Here is an example:

    @Override
    public void printName() {
        System.out.println(this.name);
    }

2. Built-in annotations

    Đây là 1 vài chú thích được tích hợp sẵn 

    let's discuss the three main built-in annotations that were presented to the world in Java 5:

    @Deprecatedlà một chú thích đơn giản có nghĩa là phương thức được đánh dấu (hoặc lớp, trường, v.v.) không được dùng nữa, tức là đã lỗi thời và không còn được sử dụng nữa. Chú thích này gây ra cảnh báo trình biên dịch nếu mã được sử dụng.
        @Deprecated
        public void oldMethod() {
            System.out.println("Hello!");
        }

    @SuppressWarningsra lệnh cho trình biên dịch vô hiệu hóa một số cảnh báo thời gian biên dịch. 
    Bạn chỉ định trong các tham số cảnh báo nào bạn không muốn thấy, ví dụ:
        @SuppressWarnings("unused")
        public void printHello() {
            System.out.println("Hello!");
        }
        với @SuppressWarnings("unused")chú thích trong đó "không sử dụng" là một tham số, bạn có thể tắt cảnh báo hàm k được sử dụng biên dịch đó.

    @Override marks a method that overrides a superclass method. 
    This annotation can only be applied to methods. 
    We will consider it in detail in a separate topic about overriding methods.

3.  Annotation elements

    In SuppressWarnings, the full syntax is value = value.
        @SuppressWarnings(value = "unused")

    An annotation element can also be an array. In fact, the actual type of value in@SuppressWarnings annotation is String[]:

        @SuppressWarnings({"unused", "deprecation"})
        public void printHello() { ... }
    "deprecation", như bạn có thể đoán từ cái tên, hướng dẫn trình biên dịch chặn các cảnh báo về việc sử dụng mã không dùng nữa.

    Cuối cùng, điều cuối cùng bạn cần biết là một số chú thích có giá trị mặc định cho một phần tử và một số thì không.

    @SuppressWarnings // wrong syntax, there is no default value!
    public void printHello() {
        System.out.println("Hello!");
    }
    Ví dụ: @SuppressWarningskhông có giá trị mặc định, vì vậy bạn không thể bỏ qua nó.

4. @Deprecatedchú thích
    @Deprecated chú thích có hai: sincevà forRemoval

    sinceyêu cầu phiên bản (Chuỗi) trong đó phần tử được chú thích không còn được dùng nữa. Giá trị mặc định là một chuỗi rỗng.
    forRemovalcho biết liệu phần tử được chú thích có bị xóa trong phiên bản tương lai hay không. Giá trị mặc định là false.

    @Deprecated(since = "5.3", forRemoval = true)
    public void printHello() {
        System.out.println("Hello!");
    }
    Ví dụ trên có nghĩa là printHellophương thức này không được dùng nữa kể từ phiên bản 5.3 của thư viện của chúng tôi và nó sẽ bị xóa trong bản phát hành tiếp theo.

5. Chú thích tùy chỉnh 

    Xem xét 2 chú thích từ bên ngoài range và null 

    Chú @NotNullthích cho biết một trong hai tùy chọn sau:
    một biến không thể là null;
    một phương pháp không nên trả lại null.
    
    Và @Rangechú thích chỉ ra một trong các tùy chọn sau:
    một biến luôn thuộc về phạm vi được chỉ định;
    một phương thức trả về một số nguyên thuộc phạm vi đã chỉ định.

        class GameCharacter {

            @NotNull
            private String login;

            @Range(min = 1, max = 100)
            private int level = 1;

            public GameCharacter(
                    @NotNull String login,
                    @Range(min = 1, max = 100) int level) {

                this.login = login;
                this.level = level;
            }

            @NotNull
            public String getLogin() {
                return login;
            }

            @Range(min = 1, max = 100)
            public int getLevel() {
                return level;
            }
        }