Motivation: Generics enable you to detect errors at compile time rather than at runtime.

Like arraylist<String>
      arr.add(5) -> wrong in compile time

1. Defining Generic classes and interfaces

Ex: 
class genericStack<E> {
  private List<E> list = new ArrayList<>();
  public int getSize() return list.size();
  public E peek() : return list.get(list.size()-1));
  public void push(E o) list.add(o);
  public void pop() list.remove(list.size() - 1);
  public boolean isEmpty() return list.isEmpty();
  public String toString() return "stack: " + list.toString();
}

2. Raw Types

List list = new ArrayList<>();
list.add(5);
list.add("hjehe");
list.add(new Point(1, 2));

3. Erasure and restriction

The compiler after check the code, they erase generic code -> raw code

ArrayList<String> list = new ArrayList<>();
list.add("Oklahoma");
String state = list.get(0);
 
--> ArrayList list = new ArrayList();
list.add("Oklahoma");
String state = (String)(list.get(0));

Some restrictions: 
1. new E()
E object = new E();
-> wrong cause new E() is execuated at runtime but generic E is erased before run

2. new E[]
3. generic types in static method
